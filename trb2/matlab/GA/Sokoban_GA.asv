
function Res = Sokoban_GA(tmax, popSize, crossProb, mutProb, data)
    %
    % Genetic algorithm
    % Make t = 0;
    % Initialize the population P(0), at random.
    % Evaluate P(0)
    % Repeat step 1 to 5 (until close to saturation)
    %   Step 1 t = t+1
    %   Step 2 Select the fittest from P(t-1) to build P(t)
    %   Step 3 Cross P(t)
    %   Step 4 Mutate some solution from P(t)
    %   Step 5 Evaluate P(t)
    %
    %
    
    % Maximization problem
    sense = 'maximize';

    Res = GA(data, tmax, popSize, crossProb, ...
             mutProb, @select, @cross, @mutate, ...
             @getInitialSolution, ...
             @evalFunction, @isOptimum, sense);
    
end


%////////////////////////////////////////////////////////////

% Selection
function newPop = select(pop, f)
    popSize = length(pop);
    popRandIdxs = randi([1, popSize], 1, popSize);
    % Binary tournament selection
    for i = 1 : popSize
        if f(i) > f(popRandIdxs(i))
            newPop(i, :) = pop(i, :);
        else
            newPop(i, :) = pop(popRandIdxs(i), :);
        end
    end 
end

% Crossing
function newPop = cross(data, pop, crossProb)
    % one-point crossover
     newPop = onePointCrossover(data, pop, crossProb);

    % two-point crossover
%    newPop = twoPointCrossover(data, pop, crossProb);
end


function newPop = twoPointCrossover(data, pop, crossProb)
    % N
    N = data.N;
    popSize = size(pop, 1);
    crossIdxs = randi([1,N], popSize/2, 2); % Two indexes
    % Sort indexes
    crossIdxs = sort(crossIdxs);
    newPop = pop;
    probs = rand(popSize/2, 1);
    k = 0;
    for j = 1:2:popSize
        k = k+1;
        if  probs(k) < crossProb
            middleIdxs = crossIdxs(k,1)+1:crossIdxs(k,2);
            middle1 = newPop(j, middleIdxs); % Middle of first parent
            middle2 = newPop(j+1, middleIdxs); % Middle of second parent
            % Exchange info            
            newPop(j, middleIdxs) = middle2; 
            newPop(j+1, middleIdxs) = middle1;
        end
    end
 end


function newPop = onePointCrossover(data, pop, crossProb)
    % N
    N = data.N;
    popSize = size(pop, 1);
    crossIdxs = randi([1,N], popSize, 1);
    newPop = pop;
    probs = rand(popSize/2, 1);
    k = 0;
    for j = 1:2:popSize
        k = k+1;
        if  probs(k) < crossProb
            aux = newPop(j, crossIdxs(j):N); % Right part
            newPop(j, crossIdxs(j):N) = newPop(j+1, crossIdxs(j):N); % Right part
            newPop(j+1, crossIdxs(j):N) = aux;
        end
    end
 end


% Mutation
function newPop = mutate(data, pop, mutProb)
    % N
    N = data.N;
    % one-bit mutation
    popSize = size(pop, 1);
    mutIdxs = randi([1,N], popSize, 1);
    newPop = pop;
    probs = rand(popSize, 1);
    for j = 1:popSize
        if probs(j) < mutProb
            allVals = 0:N;
            oldVal = newPop(j, mutIdxs(j));
            possibleMut = allVals(allVals ~= oldVal);
            
            % Pick a random new value from the remaining options
            newPop(j, mutIdxs(j)) = possibleVals(randi(numel(possibleVals)));
        end
    end
end

% mutProb = 0.10
% 
% probs = [0.01,
%  0.25,
%  0.3,
%  0.78,
%  0.09
%  0.65
%  ]
% 
% It will mutate solutions at indices j = 1  (probs[1]=0.01),
% and j = 5  (probs[5]=0.09)


%////////////////////////////////////////////////////////////

% isOptimum
% value 
function res = isOptimum(fu, data)
    if fu == data.optimum
        res = true;
    else
        res = false;
    end
end

% Generate initial solution
function s = getInitialSolution(data)
    s = randi([0, 4], 1, data.N);   
end

% Evaluation function 
% A solution s is represented as a string of N moves.
function c = evalFunction(s, data)
    map = doMoves(s, data.map);

    [goalRows, goalCols] = find(map == '.' | map == '+');
    [boxRows, boxCols] = find(map == '$');

    boxesOnGoals = sum(map(:) == '*');

    boxesNotOnGoals = sum(map(:) == '$');

    scoreBoxes = 10 * (boxesNotOnGoals - boxesOnGoals);

    totalBoxDistance = 0;
    for i = 1:length(boxRows)
        boxPos = [boxRows(i), boxCols(i)];

        minDist = inf;
        for j = 1:length(goalRows)
            goalPos = [goalRows(j), goalCols(j)];
            dist = abs(boxPos(1) - goalPos(1)) + abs(boxPos(2) - goalPos(2));
            if dist < minDist
                minDist = dist;
            end
        end

        totalBoxDistance = totalBoxDistance + minDist;
    end

    deadlockPenalty = 0;
    for i = 1:length(boxRows)
        r = boxRows(i);
        c = boxCols(i);

        if map(r, c) ~= '.'
            if (map(r-1, c) == '#' && map(r, c-1) == '#') || ...
               (map(r-1, c) == '#' && map(r, c+1) == '#') || ...
               (map(r+1, c) == '#' && map(r, c-1) == '#') || ...
               (map(r+1, c) == '#' && map(r, c+1) == '#')
                deadlockPenalty = deadlockPenalty + 10;
            end
        end
    end
    
    moves = sum(s ~= 0);
   
    % Evaluate
    c = moves + totalBoxDistance + scoreBoxes + deadlockPenalty;
end

function AfterMove = doMove(dir, map)    
    movements = {[0, -1], [0,  1], [-1, 0], [1, 0]};

    mov = movements(dir);

    % FIND PLAYER
    [row, col] = find(map == '@');
    if isempty(row)
        [row, col] = find(map == '+');
    end
  
    newRow = row + mov(1);
    newCol = col + mov(2);

    if newRow < 1 || newRow > size(map,1) || newCol < 1 || newCol > size(map,2)
        return
    end

    newPos = map(newRow, newCol);

    % INVALID MOVE CASE
    if newPos == '#'
        return
    end

    % PUSH CASE
    if newPos == '$' || newPos == '*'
        checkRow = newRow + mov(1);
        checkCol = newCol + mov(2);

        if checkRow < 1 || checkRow > size(map,1) || checkCol < 1 || checkCol > size(map,2)
            return
        end

        % nova posição
        checkPos = map(checkRow, checkCol);

        % INVALID PUSH CASE
        if checkPos == '#' || checkPos == '$' || checkPos == '*'
            return
        end

        % MOVE BOX
        if checkPos == '.'
            map(checkRow, checkCol) = '*';
        else
            map(checkRow, checkCol) = '$';
        end

        % MOVE PLAYER
        if newPos == '*'
            map(newRow, newCol) = '+';
        else
            map(newRow, newCol) = '@';
        end

        if map(row, col) == '+'
            map(row, col) = '.';
        else
            map(row, col) = ' ';
        end

        AfterMove = map;
        return
    end

    % BASE MOVE CASE
    if newPos == '.' 
        map(newRow, newCol) = '+';
    else
        map(newRow, newCol) = '@';
    end

    if map(row, col) == '+'
        map(row, col) = '.';
    else
        map(row, col) = ' ';
    end

    AfterMove = map;
end

function FM = doMoves(moves, map)
    aux = map;
    for m = 1 : moves
        if (m ~= 0) 
            aux = doMove(m, aux);
        end
    end 
    FM = aux;
end
           